services:
  # Service untuk Database PostgreSQL
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      # Format: <host_port>:<container_port>
      - "5433:5432"
    healthcheck: # Cek jika database siap menerima koneksi
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Service untuk Aplikasi Django
  web:
    build: .
    # command: python manage.py runserver 0.0.0.0:8000 # Perintah jika TIDAK pakai entrypoint.sh
    tty: true
    entrypoint: /app/entrypoint.sh
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    env_file: # semua data diambil variabel dari file .env
      - .env
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
